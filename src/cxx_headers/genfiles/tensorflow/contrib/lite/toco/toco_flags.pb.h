// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/lite/toco/toco_flags.proto

#ifndef PROTOBUF_tensorflow_2fcontrib_2flite_2ftoco_2ftoco_5fflags_2eproto_INCLUDED
#define PROTOBUF_tensorflow_2fcontrib_2flite_2ftoco_2ftoco_5fflags_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/contrib/lite/toco/types.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcontrib_2flite_2ftoco_2ftoco_5fflags_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTocoFlagsImpl();
void InitDefaultsTocoFlags();
inline void InitDefaults() {
  InitDefaultsTocoFlags();
}
}  // namespace protobuf_tensorflow_2fcontrib_2flite_2ftoco_2ftoco_5fflags_2eproto
namespace toco {
class TocoFlags;
class TocoFlagsDefaultTypeInternal;
extern TocoFlagsDefaultTypeInternal _TocoFlags_default_instance_;
}  // namespace toco
namespace google {
namespace protobuf {
template<> ::toco::TocoFlags* Arena::Create< ::toco::TocoFlags>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace toco {

enum FileFormat {
  FILE_FORMAT_UNKNOWN = 0,
  TENSORFLOW_GRAPHDEF = 1,
  TFLITE = 2,
  GRAPHVIZ_DOT = 3
};
bool FileFormat_IsValid(int value);
const FileFormat FileFormat_MIN = FILE_FORMAT_UNKNOWN;
const FileFormat FileFormat_MAX = GRAPHVIZ_DOT;
const int FileFormat_ARRAYSIZE = FileFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileFormat_descriptor();
inline const ::std::string& FileFormat_Name(FileFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileFormat_descriptor(), value);
}
inline bool FileFormat_Parse(
    const ::std::string& name, FileFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileFormat>(
    FileFormat_descriptor(), name, value);
}
// ===================================================================

class TocoFlags : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:toco.TocoFlags) */ {
 public:
  TocoFlags();
  virtual ~TocoFlags();

  TocoFlags(const TocoFlags& from);

  inline TocoFlags& operator=(const TocoFlags& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TocoFlags(TocoFlags&& from) noexcept
    : TocoFlags() {
    *this = ::std::move(from);
  }

  inline TocoFlags& operator=(TocoFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TocoFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TocoFlags* internal_default_instance() {
    return reinterpret_cast<const TocoFlags*>(
               &_TocoFlags_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TocoFlags* other);
  friend void swap(TocoFlags& a, TocoFlags& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TocoFlags* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TocoFlags>(NULL);
  }

  TocoFlags* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TocoFlags>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TocoFlags& from);
  void MergeFrom(const TocoFlags& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TocoFlags* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .toco.FileFormat input_format = 1;
  bool has_input_format() const;
  void clear_input_format();
  static const int kInputFormatFieldNumber = 1;
  ::toco::FileFormat input_format() const;
  void set_input_format(::toco::FileFormat value);

  // optional .toco.FileFormat output_format = 2;
  bool has_output_format() const;
  void clear_output_format();
  static const int kOutputFormatFieldNumber = 2;
  ::toco::FileFormat output_format() const;
  void set_output_format(::toco::FileFormat value);

  // optional .toco.IODataType inference_type = 4;
  bool has_inference_type() const;
  void clear_inference_type();
  static const int kInferenceTypeFieldNumber = 4;
  ::toco::IODataType inference_type() const;
  void set_inference_type(::toco::IODataType value);

  // optional float default_ranges_min = 5;
  bool has_default_ranges_min() const;
  void clear_default_ranges_min();
  static const int kDefaultRangesMinFieldNumber = 5;
  float default_ranges_min() const;
  void set_default_ranges_min(float value);

  // optional float default_ranges_max = 6;
  bool has_default_ranges_max() const;
  void clear_default_ranges_max();
  static const int kDefaultRangesMaxFieldNumber = 6;
  float default_ranges_max() const;
  void set_default_ranges_max(float value);

  // optional bool drop_fake_quant = 7;
  bool has_drop_fake_quant() const;
  void clear_drop_fake_quant();
  static const int kDropFakeQuantFieldNumber = 7;
  bool drop_fake_quant() const;
  void set_drop_fake_quant(bool value);

  // optional bool reorder_across_fake_quant = 8;
  bool has_reorder_across_fake_quant() const;
  void clear_reorder_across_fake_quant();
  static const int kReorderAcrossFakeQuantFieldNumber = 8;
  bool reorder_across_fake_quant() const;
  void set_reorder_across_fake_quant(bool value);

  // optional bool allow_custom_ops = 10;
  bool has_allow_custom_ops() const;
  void clear_allow_custom_ops();
  static const int kAllowCustomOpsFieldNumber = 10;
  bool allow_custom_ops() const;
  void set_allow_custom_ops(bool value);

  // optional bool drop_control_dependency = 12;
  bool has_drop_control_dependency() const;
  void clear_drop_control_dependency();
  static const int kDropControlDependencyFieldNumber = 12;
  bool drop_control_dependency() const;
  void set_drop_control_dependency(bool value);

  // optional .toco.IODataType inference_input_type = 11;
  bool has_inference_input_type() const;
  void clear_inference_input_type();
  static const int kInferenceInputTypeFieldNumber = 11;
  ::toco::IODataType inference_input_type() const;
  void set_inference_input_type(::toco::IODataType value);

  // optional bool debug_disable_recurrent_cell_fusion = 13;
  bool has_debug_disable_recurrent_cell_fusion() const;
  void clear_debug_disable_recurrent_cell_fusion();
  static const int kDebugDisableRecurrentCellFusionFieldNumber = 13;
  bool debug_disable_recurrent_cell_fusion() const;
  void set_debug_disable_recurrent_cell_fusion(bool value);

  // @@protoc_insertion_point(class_scope:toco.TocoFlags)
 private:
  void set_has_input_format();
  void clear_has_input_format();
  void set_has_output_format();
  void clear_has_output_format();
  void set_has_inference_input_type();
  void clear_has_inference_input_type();
  void set_has_inference_type();
  void clear_has_inference_type();
  void set_has_default_ranges_min();
  void clear_has_default_ranges_min();
  void set_has_default_ranges_max();
  void clear_has_default_ranges_max();
  void set_has_drop_fake_quant();
  void clear_has_drop_fake_quant();
  void set_has_reorder_across_fake_quant();
  void clear_has_reorder_across_fake_quant();
  void set_has_allow_custom_ops();
  void clear_has_allow_custom_ops();
  void set_has_drop_control_dependency();
  void clear_has_drop_control_dependency();
  void set_has_debug_disable_recurrent_cell_fusion();
  void clear_has_debug_disable_recurrent_cell_fusion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int input_format_;
  int output_format_;
  int inference_type_;
  float default_ranges_min_;
  float default_ranges_max_;
  bool drop_fake_quant_;
  bool reorder_across_fake_quant_;
  bool allow_custom_ops_;
  bool drop_control_dependency_;
  int inference_input_type_;
  bool debug_disable_recurrent_cell_fusion_;
  friend struct ::protobuf_tensorflow_2fcontrib_2flite_2ftoco_2ftoco_5fflags_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcontrib_2flite_2ftoco_2ftoco_5fflags_2eproto::InitDefaultsTocoFlagsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TocoFlags

// optional .toco.FileFormat input_format = 1;
inline bool TocoFlags::has_input_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TocoFlags::set_has_input_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TocoFlags::clear_has_input_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TocoFlags::clear_input_format() {
  input_format_ = 0;
  clear_has_input_format();
}
inline ::toco::FileFormat TocoFlags::input_format() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.input_format)
  return static_cast< ::toco::FileFormat >(input_format_);
}
inline void TocoFlags::set_input_format(::toco::FileFormat value) {
  assert(::toco::FileFormat_IsValid(value));
  set_has_input_format();
  input_format_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.input_format)
}

// optional .toco.FileFormat output_format = 2;
inline bool TocoFlags::has_output_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TocoFlags::set_has_output_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TocoFlags::clear_has_output_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TocoFlags::clear_output_format() {
  output_format_ = 0;
  clear_has_output_format();
}
inline ::toco::FileFormat TocoFlags::output_format() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.output_format)
  return static_cast< ::toco::FileFormat >(output_format_);
}
inline void TocoFlags::set_output_format(::toco::FileFormat value) {
  assert(::toco::FileFormat_IsValid(value));
  set_has_output_format();
  output_format_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.output_format)
}

// optional .toco.IODataType inference_input_type = 11;
inline bool TocoFlags::has_inference_input_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TocoFlags::set_has_inference_input_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TocoFlags::clear_has_inference_input_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TocoFlags::clear_inference_input_type() {
  inference_input_type_ = 0;
  clear_has_inference_input_type();
}
inline ::toco::IODataType TocoFlags::inference_input_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.inference_input_type)
  return static_cast< ::toco::IODataType >(inference_input_type_);
}
inline void TocoFlags::set_inference_input_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  set_has_inference_input_type();
  inference_input_type_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.inference_input_type)
}

// optional .toco.IODataType inference_type = 4;
inline bool TocoFlags::has_inference_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TocoFlags::set_has_inference_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TocoFlags::clear_has_inference_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TocoFlags::clear_inference_type() {
  inference_type_ = 0;
  clear_has_inference_type();
}
inline ::toco::IODataType TocoFlags::inference_type() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.inference_type)
  return static_cast< ::toco::IODataType >(inference_type_);
}
inline void TocoFlags::set_inference_type(::toco::IODataType value) {
  assert(::toco::IODataType_IsValid(value));
  set_has_inference_type();
  inference_type_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.inference_type)
}

// optional float default_ranges_min = 5;
inline bool TocoFlags::has_default_ranges_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TocoFlags::set_has_default_ranges_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TocoFlags::clear_has_default_ranges_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TocoFlags::clear_default_ranges_min() {
  default_ranges_min_ = 0;
  clear_has_default_ranges_min();
}
inline float TocoFlags::default_ranges_min() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_ranges_min)
  return default_ranges_min_;
}
inline void TocoFlags::set_default_ranges_min(float value) {
  set_has_default_ranges_min();
  default_ranges_min_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_ranges_min)
}

// optional float default_ranges_max = 6;
inline bool TocoFlags::has_default_ranges_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TocoFlags::set_has_default_ranges_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TocoFlags::clear_has_default_ranges_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TocoFlags::clear_default_ranges_max() {
  default_ranges_max_ = 0;
  clear_has_default_ranges_max();
}
inline float TocoFlags::default_ranges_max() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.default_ranges_max)
  return default_ranges_max_;
}
inline void TocoFlags::set_default_ranges_max(float value) {
  set_has_default_ranges_max();
  default_ranges_max_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.default_ranges_max)
}

// optional bool drop_fake_quant = 7;
inline bool TocoFlags::has_drop_fake_quant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TocoFlags::set_has_drop_fake_quant() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TocoFlags::clear_has_drop_fake_quant() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TocoFlags::clear_drop_fake_quant() {
  drop_fake_quant_ = false;
  clear_has_drop_fake_quant();
}
inline bool TocoFlags::drop_fake_quant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.drop_fake_quant)
  return drop_fake_quant_;
}
inline void TocoFlags::set_drop_fake_quant(bool value) {
  set_has_drop_fake_quant();
  drop_fake_quant_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.drop_fake_quant)
}

// optional bool reorder_across_fake_quant = 8;
inline bool TocoFlags::has_reorder_across_fake_quant() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TocoFlags::set_has_reorder_across_fake_quant() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TocoFlags::clear_has_reorder_across_fake_quant() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TocoFlags::clear_reorder_across_fake_quant() {
  reorder_across_fake_quant_ = false;
  clear_has_reorder_across_fake_quant();
}
inline bool TocoFlags::reorder_across_fake_quant() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.reorder_across_fake_quant)
  return reorder_across_fake_quant_;
}
inline void TocoFlags::set_reorder_across_fake_quant(bool value) {
  set_has_reorder_across_fake_quant();
  reorder_across_fake_quant_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.reorder_across_fake_quant)
}

// optional bool allow_custom_ops = 10;
inline bool TocoFlags::has_allow_custom_ops() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TocoFlags::set_has_allow_custom_ops() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TocoFlags::clear_has_allow_custom_ops() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TocoFlags::clear_allow_custom_ops() {
  allow_custom_ops_ = false;
  clear_has_allow_custom_ops();
}
inline bool TocoFlags::allow_custom_ops() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.allow_custom_ops)
  return allow_custom_ops_;
}
inline void TocoFlags::set_allow_custom_ops(bool value) {
  set_has_allow_custom_ops();
  allow_custom_ops_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.allow_custom_ops)
}

// optional bool drop_control_dependency = 12;
inline bool TocoFlags::has_drop_control_dependency() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TocoFlags::set_has_drop_control_dependency() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TocoFlags::clear_has_drop_control_dependency() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TocoFlags::clear_drop_control_dependency() {
  drop_control_dependency_ = false;
  clear_has_drop_control_dependency();
}
inline bool TocoFlags::drop_control_dependency() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.drop_control_dependency)
  return drop_control_dependency_;
}
inline void TocoFlags::set_drop_control_dependency(bool value) {
  set_has_drop_control_dependency();
  drop_control_dependency_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.drop_control_dependency)
}

// optional bool debug_disable_recurrent_cell_fusion = 13;
inline bool TocoFlags::has_debug_disable_recurrent_cell_fusion() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TocoFlags::set_has_debug_disable_recurrent_cell_fusion() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TocoFlags::clear_has_debug_disable_recurrent_cell_fusion() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TocoFlags::clear_debug_disable_recurrent_cell_fusion() {
  debug_disable_recurrent_cell_fusion_ = false;
  clear_has_debug_disable_recurrent_cell_fusion();
}
inline bool TocoFlags::debug_disable_recurrent_cell_fusion() const {
  // @@protoc_insertion_point(field_get:toco.TocoFlags.debug_disable_recurrent_cell_fusion)
  return debug_disable_recurrent_cell_fusion_;
}
inline void TocoFlags::set_debug_disable_recurrent_cell_fusion(bool value) {
  set_has_debug_disable_recurrent_cell_fusion();
  debug_disable_recurrent_cell_fusion_ = value;
  // @@protoc_insertion_point(field_set:toco.TocoFlags.debug_disable_recurrent_cell_fusion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace toco

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::toco::FileFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toco::FileFormat>() {
  return ::toco::FileFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcontrib_2flite_2ftoco_2ftoco_5fflags_2eproto_INCLUDED
