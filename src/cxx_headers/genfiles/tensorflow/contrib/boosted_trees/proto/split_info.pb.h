// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/boosted_trees/proto/split_info.proto

#ifndef PROTOBUF_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_INCLUDED
#define PROTOBUF_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/contrib/boosted_trees/proto/tree_config.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSplitInfoImpl();
void InitDefaultsSplitInfo();
inline void InitDefaults() {
  InitDefaultsSplitInfo();
}
}  // namespace protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto
namespace tensorflow {
namespace boosted_trees {
namespace learner {
class SplitInfo;
class SplitInfoDefaultTypeInternal;
extern SplitInfoDefaultTypeInternal _SplitInfo_default_instance_;
}  // namespace learner
}  // namespace boosted_trees
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::boosted_trees::learner::SplitInfo* Arena::CreateMessage< ::tensorflow::boosted_trees::learner::SplitInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace boosted_trees {
namespace learner {

// ===================================================================

class SplitInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.learner.SplitInfo) */ {
 public:
  SplitInfo();
  virtual ~SplitInfo();

  SplitInfo(const SplitInfo& from);

  inline SplitInfo& operator=(const SplitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplitInfo(SplitInfo&& from) noexcept
    : SplitInfo() {
    *this = ::std::move(from);
  }

  inline SplitInfo& operator=(SplitInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitInfo* internal_default_instance() {
    return reinterpret_cast<const SplitInfo*>(
               &_SplitInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(SplitInfo* other);
  void Swap(SplitInfo* other);
  friend void swap(SplitInfo& a, SplitInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<SplitInfo>(NULL);
  }

  SplitInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<SplitInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SplitInfo& from);
  void MergeFrom(const SplitInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SplitInfo* other);
  protected:
  explicit SplitInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
  bool has_split_node() const;
  void clear_split_node();
  static const int kSplitNodeFieldNumber = 1;
  const ::tensorflow::boosted_trees::trees::TreeNode& split_node() const;
  ::tensorflow::boosted_trees::trees::TreeNode* release_split_node();
  ::tensorflow::boosted_trees::trees::TreeNode* mutable_split_node();
  void set_allocated_split_node(::tensorflow::boosted_trees::trees::TreeNode* split_node);
  void unsafe_arena_set_allocated_split_node(
      ::tensorflow::boosted_trees::trees::TreeNode* split_node);
  ::tensorflow::boosted_trees::trees::TreeNode* unsafe_arena_release_split_node();

  // .tensorflow.boosted_trees.trees.Leaf left_child = 2;
  bool has_left_child() const;
  void clear_left_child();
  static const int kLeftChildFieldNumber = 2;
  const ::tensorflow::boosted_trees::trees::Leaf& left_child() const;
  ::tensorflow::boosted_trees::trees::Leaf* release_left_child();
  ::tensorflow::boosted_trees::trees::Leaf* mutable_left_child();
  void set_allocated_left_child(::tensorflow::boosted_trees::trees::Leaf* left_child);
  void unsafe_arena_set_allocated_left_child(
      ::tensorflow::boosted_trees::trees::Leaf* left_child);
  ::tensorflow::boosted_trees::trees::Leaf* unsafe_arena_release_left_child();

  // .tensorflow.boosted_trees.trees.Leaf right_child = 3;
  bool has_right_child() const;
  void clear_right_child();
  static const int kRightChildFieldNumber = 3;
  const ::tensorflow::boosted_trees::trees::Leaf& right_child() const;
  ::tensorflow::boosted_trees::trees::Leaf* release_right_child();
  ::tensorflow::boosted_trees::trees::Leaf* mutable_right_child();
  void set_allocated_right_child(::tensorflow::boosted_trees::trees::Leaf* right_child);
  void unsafe_arena_set_allocated_right_child(
      ::tensorflow::boosted_trees::trees::Leaf* right_child);
  ::tensorflow::boosted_trees::trees::Leaf* unsafe_arena_release_right_child();

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.learner.SplitInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::boosted_trees::trees::TreeNode* split_node_;
  ::tensorflow::boosted_trees::trees::Leaf* left_child_;
  ::tensorflow::boosted_trees::trees::Leaf* right_child_;
  mutable int _cached_size_;
  friend struct ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto::InitDefaultsSplitInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SplitInfo

// .tensorflow.boosted_trees.trees.TreeNode split_node = 1;
inline bool SplitInfo::has_split_node() const {
  return this != internal_default_instance() && split_node_ != NULL;
}
inline const ::tensorflow::boosted_trees::trees::TreeNode& SplitInfo::split_node() const {
  const ::tensorflow::boosted_trees::trees::TreeNode* p = split_node_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::trees::TreeNode*>(
      &::tensorflow::boosted_trees::trees::_TreeNode_default_instance_);
}
inline ::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::release_split_node() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  
  ::tensorflow::boosted_trees::trees::TreeNode* temp = split_node_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  split_node_ = NULL;
  return temp;
}
inline ::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::unsafe_arena_release_split_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  
  ::tensorflow::boosted_trees::trees::TreeNode* temp = split_node_;
  split_node_ = NULL;
  return temp;
}
inline ::tensorflow::boosted_trees::trees::TreeNode* SplitInfo::mutable_split_node() {
  
  if (split_node_ == NULL) {
    split_node_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::TreeNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.split_node)
  return split_node_;
}
inline void SplitInfo::set_allocated_split_node(::tensorflow::boosted_trees::trees::TreeNode* split_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(split_node_);
  }
  if (split_node) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(split_node)->GetArena();
    if (message_arena != submessage_arena) {
      split_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, split_node, submessage_arena);
    }
    
  } else {
    
  }
  split_node_ = split_node;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.split_node)
}

// .tensorflow.boosted_trees.trees.Leaf left_child = 2;
inline bool SplitInfo::has_left_child() const {
  return this != internal_default_instance() && left_child_ != NULL;
}
inline const ::tensorflow::boosted_trees::trees::Leaf& SplitInfo::left_child() const {
  const ::tensorflow::boosted_trees::trees::Leaf* p = left_child_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::trees::Leaf*>(
      &::tensorflow::boosted_trees::trees::_Leaf_default_instance_);
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::release_left_child() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  
  ::tensorflow::boosted_trees::trees::Leaf* temp = left_child_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  left_child_ = NULL;
  return temp;
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::unsafe_arena_release_left_child() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  
  ::tensorflow::boosted_trees::trees::Leaf* temp = left_child_;
  left_child_ = NULL;
  return temp;
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::mutable_left_child() {
  
  if (left_child_ == NULL) {
    left_child_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.left_child)
  return left_child_;
}
inline void SplitInfo::set_allocated_left_child(::tensorflow::boosted_trees::trees::Leaf* left_child) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_child_);
  }
  if (left_child) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(left_child)->GetArena();
    if (message_arena != submessage_arena) {
      left_child = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_child, submessage_arena);
    }
    
  } else {
    
  }
  left_child_ = left_child;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.left_child)
}

// .tensorflow.boosted_trees.trees.Leaf right_child = 3;
inline bool SplitInfo::has_right_child() const {
  return this != internal_default_instance() && right_child_ != NULL;
}
inline const ::tensorflow::boosted_trees::trees::Leaf& SplitInfo::right_child() const {
  const ::tensorflow::boosted_trees::trees::Leaf* p = right_child_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::trees::Leaf*>(
      &::tensorflow::boosted_trees::trees::_Leaf_default_instance_);
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::release_right_child() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  
  ::tensorflow::boosted_trees::trees::Leaf* temp = right_child_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  right_child_ = NULL;
  return temp;
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::unsafe_arena_release_right_child() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  
  ::tensorflow::boosted_trees::trees::Leaf* temp = right_child_;
  right_child_ = NULL;
  return temp;
}
inline ::tensorflow::boosted_trees::trees::Leaf* SplitInfo::mutable_right_child() {
  
  if (right_child_ == NULL) {
    right_child_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::trees::Leaf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.learner.SplitInfo.right_child)
  return right_child_;
}
inline void SplitInfo::set_allocated_right_child(::tensorflow::boosted_trees::trees::Leaf* right_child) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_child_);
  }
  if (right_child) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(right_child)->GetArena();
    if (message_arena != submessage_arena) {
      right_child = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_child, submessage_arena);
    }
    
  } else {
    
  }
  right_child_ = right_child;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.learner.SplitInfo.right_child)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace learner
}  // namespace boosted_trees
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcontrib_2fboosted_5ftrees_2fproto_2fsplit_5finfo_2eproto_INCLUDED
